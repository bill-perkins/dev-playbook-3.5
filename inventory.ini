# original:
#deployTarget ansible_connection=local consul_bind_adapter=ens192
#micro2 ansible_host=sasdevmicrorhelsr02 consul_bind_adapter=ens192
#controller1 ansible_host=sasdevcontrollerrhelsr01 consul_bind_adapter=ens192
#controller2 ansible_host=sasdevcontrollerrhelsr02 consul_bind_adapter=ens192
#worker1 ansible_host=sasdevcasrhelsr01 consul_bind_adapter=ens192
#worker2 ansible_host=sasdevcasrhelsr02 consul_bind_adapter=ens192
#worker3 ansible_host=sasdevcasrhelsr03 consul_bind_adapter=ens192

#deployTarget  ansible_host=sasdevmicrorhelsr01.corp.local      ansible_user=viyadep  ansible_ssh_private_key_file=~/.ssh/id_rsa consul_bind_adapter=ens192
#micro2        ansible_host=sasdevmicrorhelsr02.corp.local      ansible_user=viyadep  ansible_ssh_private_key_file=~/.ssh/id_rsa consul_bind_adapter=ens192
#controller1   ansible_host=sasdevcontrollerrhelsr01.corp.local ansible_user=viyadep  ansible_ssh_private_key_file=~/.ssh/id_rsa consul_bind_adapter=ens192
#controller2   ansible_host=sasdevcontrollerrhelsr02.corp.local ansible_user=viyadep  ansible_ssh_private_key_file=~/.ssh/id_rsa consul_bind_adapter=ens192
#worker1       ansible_host=sasdevcasrhelsr01.corp.local        ansible_user=viyadep  ansible_ssh_private_key_file=~/.ssh/id_rsa consul_bind_adapter=ens192
#worker2       ansible_host=sasdevcasrhelsr02.corp.local        ansible_user=viyadep  ansible_ssh_private_key_file=~/.ssh/id_rsa consul_bind_adapter=ens192
## worker3       ansible_host=sasdevcasrhelsr03.corp.local        ansible_user=viyadep  ansible_ssh_private_key_file=~/.ssh/id_rsa consul_bind_adapter=ens192

deployTarget  ansible_host=sasdevmicrorhelsr01      ansible_user=root  ansible_ssh_private_key_file=~/.ssh/id_rsa consul_bind_adapter=ens192
micro2        ansible_host=sasdevmicrorhelsr02      ansible_user=root  ansible_ssh_private_key_file=~/.ssh/id_rsa consul_bind_adapter=ens192
controller1   ansible_host=sasdevcontrollerrhelsr01 ansible_user=root  ansible_ssh_private_key_file=~/.ssh/id_rsa consul_bind_adapter=ens192
controller2   ansible_host=sasdevcontrollerrhelsr02 ansible_user=root  ansible_ssh_private_key_file=~/.ssh/id_rsa consul_bind_adapter=ens192
worker1       ansible_host=sasdevcasrhelsr01        ansible_user=root  ansible_ssh_private_key_file=~/.ssh/id_rsa consul_bind_adapter=ens192
worker2       ansible_host=sasdevcasrhelsr02        ansible_user=root  ansible_ssh_private_key_file=~/.ssh/id_rsa consul_bind_adapter=ens192
##worker3       ansible_host=sasdevcasrhelsr03        ansible_user=root  ansible_ssh_private_key_file=~/.ssh/id_rsa consul_bind_adapter=ens192

# The AdminServices host group contains services used to support administrative tasks that have transient load.
[AdminServices]
deployTarget
micro2

# The CASServices host group contains services used to interact between the CAS server(s) and the mid-tier services.
[CASServices]
deployTarget
micro2

# The CognitiveComputingServices host group contains services for performing common text analytics tasks.
[CognitiveComputingServices]
deployTarget
micro2

# The CommandLine host group contains command line interfaces for remote interaction with services.
# It should include every host in the deployment.
[CommandLine]
deployTarget
micro2
controller1
controller2
worker1
worker2
#worker3

# The ComputeServer host group contains the Compute Server that executes SAS code on behalf of the Compute Service.
# It supports more than one host during initial deployment for both single-tenant and multi-tenant deployments.
# If multiple hosts are configured, home directories must be located on shared storage devices as configured by
# the customer. Examples of shared storage are a shared directory, CAS, or other accessible location. Failover is
# not supported. In the event of a failure, a session will be established on a different host, and the user must
# log on to re-establish state. In a multi-tenant environment, hosts are shared across all tenants. Adding additional
# hosts to this host group after the initial deployment is not currently supported.
[ComputeServer]
deployTarget
micro2

# The ComputeServices host group contains services for launching and accessing the SAS Compute Server.
[ComputeServices]
deployTarget
micro2

# The CoreServices host group contains base-level services providing a common feature set to mid-tier services.
# SAS Logon is part of this host group.
[CoreServices]
deployTarget
micro2

# The DataServices host group contains services that provide data management features.
[DataServices]
deployTarget
micro2

# The GraphBuilderServices host group contains services that provide tools to create and edit custom graphs.
[GraphBuilderServices]
deployTarget
micro2

# The HomeServices host group contains services that provide SAS Home and its features.
[HomeServices]
deployTarget
micro2

# The ModelServices host group supports registering and organizing models in a common model repository, and publishing models to different destinations.
# The microservices within this group can be integrated with other systems using the REST API.
[ModelServices]
deployTarget
micro2

# The Operations host group contains services that accumulate metric, log, and notification events from RabbitMQ, then process those into CAS tables which are consumed by the SAS Environment Manager application.
# The Operations services utilize applications supplied by the programming host group, so specify a target host that 
# is included in the programming host group.
# The Operations host group does not support multiple hosts at this time. Do not put more than one host in the 
# Operations host group.
[Operations]
deployTarget

# The ReportServices host group contains services that provide report management features.
[ReportServices]
deployTarget
micro2

# The ReportViewerServices host group contains services that provide report viewing features.
[ReportViewerServices]
deployTarget
micro2

# The ScoringServices host group supports definition and execution of scoring jobs for models and other SAS content.
[ScoringServices]
deployTarget
micro2

# The StudioViya host group contains services that provide a SAS programming interface.
[StudioViya]
deployTarget
micro2

# The ThemeServices host group contains services that provide theme management features.
[ThemeServices]
deployTarget
micro2

# The configuratn host group contains the service that manages customizable configuration for the SAS environment.
[configuratn]
deployTarget
micro2

# The consul host group contains the Consul server.
[consul]
deployTarget
micro2

# The httpproxy host group contains HTTP Proxy Server.
[httpproxy]
deployTarget
micro2

# The pgpoolc host group contains PG Pool for High Availability PostgreSQL.
[pgpoolc]
deployTarget

# The programming host group contains SAS Foundation, SAS Studio, SAS Workspace Server, SAS/CONNECT and any SAS/ACCESS engines.
# It has the same conditions as ComputeServer.
[programming]
deployTarget
micro2

# The rabbitmq host group contains Rabbit MQ, a messaging broker.
# The deployment will take the first entry in this host list as the "primary"
# machine to initialize the cluster. After that deployment, if you adjust the
# inventory and place a different entry as the first Rabbit MQ machine, you will
# run the risk two distinct Rabbit MQ clusters running independently with no
# knowledge of each other and messages split between the two.
[rabbitmq]
deployTarget
micro2

# The sas_casserver_primary host group contains the CAS controller node.
# The first host in the sas_casserver_primary list is used by the tenant in a single-tenant deployment or by the
# provider in a multi-tenant deployment. Only one configuration of CAS (including one primary controller and one
# secondary controller) per tenant is supported. Therefore, if you change the first host in the list, you are
# changing the primary CAS controller for a single-tenant deployment or, for multi-tenant deployments, you
# are changing the primary CAS controller for the provider. Any additional hosts in the sas_casserver_primary
# list are used in a multi-tenant environment. The configuration for those additional hosts (primary controller,
# secondary controller, or worker) are determined by the tenant-vars.yml file.
# For more information about the tenant-vars.yml file, see the SAS Viya Administration documentation.
[sas_casserver_primary]
controller1

# The sas_casserver_secondary host group can be used to create a CAS backup controller node.
# This is an optional node that can take over for the primary CAS controller node if it fails. It is used only by
# the tenant in a single-tenant deployment or by the provider in a multi-tenant deployment. Secondary controllers
# for additional tenants are determined by the tenant-vars.yml file. To support failover for predefined libraries,
# a shared file system must be available for the primary and secondary controllers. Each CAS cluster can have only
# one CAS backup controller node.
# For more information about the shared file system, see the SAS Viya deployment documentation.
[sas_casserver_secondary]
controller2

# The sas_casserver_worker host group contains CAS worker node.
# It is used only by the tenant in a single-tenant deployment or by the provider in a multi-tenant deployment. Workers
# for additional tenants are determined by the tenant-vars.yml file.
# For more information about the tenant-vars.yml file, see the SAS Viya Administration documentation.
[sas_casserver_worker]
worker1
worker2
#worker3

# The sasdatasvrc host group contains SAS PostgreSQL.
[sasdatasvrc]
deployTarget

# [sas_all:children] contains each host group used in your SAS deployment. Do not alter its contents.
# See your deployment guide for more details.
[sas_all:children]
AdminServices
CASServices
CognitiveComputingServices
CommandLine
ComputeServer
ComputeServices
CoreServices
DataServices
GraphBuilderServices
HomeServices
ModelServices
Operations
ReportServices
ReportViewerServices
ScoringServices
StudioViya
ThemeServices
configuratn
consul
httpproxy
pgpoolc
programming
rabbitmq
sas_casserver_primary
sas_casserver_secondary
sas_casserver_worker
sasdatasvrc

